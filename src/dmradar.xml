<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE cxchelptopics SYSTEM "CXCHelp.dtd">
<cxchelptopics>
   <ENTRY context="tools" key="dmradar" refkeywords="dm adaptive binning grouping group recursive shell quad tree nautilus radar pie polar sector" seealsogroups="dmimgtools">
   <SYNOPSIS>
	Perform polar quad-tree adaptive binning on 2D images
   </SYNOPSIS>
   <DESC>
      <PARA>
    `dmradar' performs the a polar equivalent of a quad-tree 
    adaptive binning algorithm used in `dmradar'.  Rather than 
    splitting the image in X and Y, 
    it works in polar coordinates:  angle and radii. 
        </PARA>
 

      <PARA>
	The tool computes the
	signal-to-noise ratio (SNR) for the entire image and
    for the four sub-images taken by dividing the 
    angle in half and the radius in half.  Based on the 'method' parameter
    the algorithm will then either accept the full image, or
    iterate over each of the sub-images, repeating the divide-by-two 
    algorithm until the threshold criteria is met or a single pixel
    remains.
        </PARA>


    <PARA title="SNR Criteria: method parameter">
    With method=1, if the SNR of any one of the sub-images is greater than the 
    input threshold, then the sub-images are used.
    </PARA>
    <PARA>
    With method=2, if the SNR of two sub-images that share a common side (ie not 
    diagonal) are greater than the input threshold then the sub-images are used.    
    </PARA>
    <PARA>
    With method=3, if the SNR of any three of the sub-images is greater than
    the input threshold, then the sub-images are used.
    </PARA>
    <PARA>
    With method=4, the SNR of all of the sub-images must be above the threshold
    for the sub-images to be used.  This is the most strict 
    lower limit test; it may lead to some unexpected behavior.
    </PARA>

    <PARA>
    With method=0, if the SNR of the entire image is greater than the
	input threshold, the sub-images are used. This make the threshold
    behave as an upper limit (image keeps dividing until SNR of the
    sub-image falls  below the threshold).       A description of
	the technique can be found in Samet, H. "The Quadtree and
	Related Hierarchical Data Structures", 1984, ACM Computing 
	Surveys, 16, 187.  
    </PARA>
    
    <PARA>
     For each sub-image, the process is repeated until the SNR 
     criteria is met.    
    </PARA>

    <PARA>
    	The output pixels are then the sum of the pixels in
	the sub-image divided by the area of the sub-image.  The tool
	can also optionally output the area, SNR, and a mask/group
	number for each output pixel. 
	</PARA>



      <PARA>
	Pixels that fall outside of the data subspace, NaNs, and
	integer NULL value pixels are all ignored when computing the
	sum, area and SNR. 
      </PARA>


	<PARA>
	 If no error file is supplied (inerrfile parameter), then a
	 Gaussian approximation "(sqrt(image value))" is used. If an
	 error file is supplied, it must be the same size as the input
	 image.   
      </PARA>

	<PARA>
	The output mask file can be used with 
	<HREF link="http://cxc.harvard.edu/ciao/ahelp/dmmaskbin.html">dmmaskbin</HREF> to group
	another image of the same dimensions using the same bin
	sizes.  This is useful say to group the data based on
	broad-band energy filter and then group narrow band images
	using the same grouping scheme.
	</PARA>

    <PARA>
        Users can also specify different shapes to be used.
        The default is circular pie-annulus shaped regions.  Users can 
        also use elliptical annulii (epanda) or box annulli (bpanda).
        The special shape=box uses a Cartesian grid (ie an enhanced 
        version of the original dmnautilus).     
    </PARA>


   </DESC>

   <QEXAMPLELIST>
      <QEXAMPLE>
         <SYNTAX>
            <LINE>
	dmradar inimg.fits outimg.fits 9 method=0 xcenter=4096 ycenter=4096
            </LINE>
         </SYNTAX>
         <DESC>
            <PARA>
	  Adaptivly bins the image in inimg.fits to a SNR threshold of
	  9.  Since no error image is supplied the SNR is computed as
	  the sqrt(inimg.fits).
            </PARA>
         </DESC>
      </QEXAMPLE>
      <QEXAMPLE>
         <SYNTAX>
            <LINE>
	dmradar inimg.fits outimg.fits 15 inerr=errs.fits method=0 xcenter=4096 ycenter=4096
            </LINE>
         </SYNTAX>
         <DESC>
            <PARA>
	Bins the input image to a SNR threshold of 15.  The error of
	each pixel is  taken from the errs.fits file.
            </PARA>
         </DESC>
      </QEXAMPLE>
      <QEXAMPLE>
         <SYNTAX>
            <LINE>
	dmradar inimg.fits outimg.fits 9 outmaskfile=mask.fits method=4 xcenter=4096 ycenter=4096
            </LINE>
         </SYNTAX>
         <DESC>
            <PARA>
	Similar to Example 1 but outputs the mask information.  Each
	pixel in the mask.fits file indicates which group the pixel
	was assigned to.  With method=4 and no input error 
    image, the output will contain bins with a minimum SNR=9 (ie 
    81 counts).
            </PARA>
         </DESC>
      </QEXAMPLE>
      <QEXAMPLE>
         <SYNTAX>
            <LINE>
	dmradar inimg.fits . 9 outmask=. outsnr=. outarea=. method=4 xcenter=4096 ycenter=4096
            </LINE>
         </SYNTAX>
         <DESC>
            <PARA>
	Similar to above but also outputs the output SNR threshold
	image and the area image.  It uses autonaming to name the
	outfile, outmaskfile, outsnrfile, and outareafile files.
            </PARA>
         </DESC>
      </QEXAMPLE>
   </QEXAMPLELIST>

   <PARAMLIST>
      <PARAM filetype="input" name="infile" reqd="yes" type="file">
         <SYNOPSIS>
	  Input 2D image
         </SYNOPSIS>
         <DESC>
            <PARA>
	  Image to be adaptive binned.
            </PARA>
         </DESC>
      </PARAM>
      <PARAM autoname="yes" filetype="output" name="outfile" reqd="yes" type="file">
         <SYNOPSIS>
	Output adaptive binned image.
         </SYNOPSIS>
         <DESC>
            <PARA>
	Output of the adaptive binning routine.  Data will be stored
	as floating point values.
            </PARA>
         </DESC>
      </PARAM>
      <PARAM def="0" min="0" name="snr" reqd="yes" type="real">
         <SYNOPSIS>
	Signal-To-Noise-Ratio threshold
         </SYNOPSIS>
         <DESC>
            <PARA>
	The signal to noise ration to split the image into 4
	sub-images.  See the method parameter for a description of the 
    how the limit is applied.
            </PARA>
         </DESC>
      </PARAM>

    <PARAM name="xcenter" type="real" reqd="yes">
      <SYNOPSIS>
        The physical x-coordinate to use for the center of the binning.
      </SYNOPSIS>
      <DESC>
        <PARA>
            The xcenter and ycenter parameters are used as the center
            of the binning.        
        </PARA>
        <PARA>
          The inner most shape, centered on this location,  
          out to a radius of rinner is always the first bin.        
        </PARA>      
      </DESC>    
    </PARAM>
    <PARAM name="ycenter" type="real" reqd="yes">
      <SYNOPSIS>
        The physical y-coordinate to use for the center of the binning.
      </SYNOPSIS>
      <DESC>
        <PARA>
            See xcenter.
        </PARA>      
      </DESC>    
    </PARAM>


      <PARAM type="integer" name="method" def="0" min="0" max="4">
        <SYNOPSIS>
        SNR threshold method
        </SYNOPSIS>
        <DESC>        
          <PARA>
            The method parameter describes the number of sub-images
            that must be above the SNR threshold for the sub-images
            to be further divided.   A value of 1 means that only 1 of the 
            sub-images must be above threshold for them all to be
            divided.  A value of 2 means that two sub-images that
            specifically share a common side (ie not diagonal) 
            are above threshold then all 4 sub-images are divided. 
            3 requires any three sub-image be above threshold, and 4
            requires all 4 sub-image be above threshold for them
            to be further subdivided.  
                            
          </PARA>        
          <PARA>
            The value of 0 is different in that the sub-images are 
            always divided if the parent image is above the SNR threshold.
            So while the other methods act as lower limits, a
            value of 0 acts as an upper limit.          
          </PARA>

        </DESC>
      </PARAM>

    <PARAM name="shape" type="string" def="pie">
      <SYNOPSIS>
        The shape of the bins: pie, epanda, bpanda, or box.
      </SYNOPSIS>
      <DESC>
        <PARA>
        The shape of the bins can be circular annulii (pie),
        elliptical annulii (epanda), box annulii (bpanda), or
        rotated rectangles (box).        
        </PARA>

        <PARA>
        shape=box is a special case where a Cartesian rather than polar
        grid is used. This makes is very similar to the original 
        dmnautilus, but with more options like the choice of bin center
        and rotation angle. 
        </PARA>

        <PARA title="Where does panda come from?">
            The abbreviation panda comes from ds9.  It means
            Pie AND Annulus. 
        </PARA>
      </DESC>
    </PARAM>


    <PARAM name="rinner" type="real" def="5" min="0">
      <SYNOPSIS>
        The inner most radius, in physical pixels.
      </SYNOPSIS>
      <DESC>
        <PARA>
            Pixels within the inner radius of the center are grouped
            into a single group with the defined shape: circle, ellipse, or box.
        </PARA>
      </DESC>
    </PARAM>

    <PARAM name="router" type="real" def="1000" min="0">
      <SYNOPSIS>
        The outer most radius, in physical pixels.
      </SYNOPSIS>
      <DESC>
        <PARA>
          The outer most radius to use for the initial quad-tree 
          search algorithm.  Pixels outside this radius are ungrouped.        
        </PARA>
      </DESC>
    </PARAM>

    <PARAM name="astart" type="real" def="0" min="0">
      <SYNOPSIS>
        The starting angle, in degrees CCW from the +X axis.
      </SYNOPSIS>
      <DESC>
        <PARA>
            Users can choose to use the entire range of angles
            (0:360), or can compute the algorithm in just a
            specific sector|wedge of the data.  This value is
            the starting angle for the wedge to include in the 
            algorithm.  It is measures in degrees, counter-clock-wise (CCW)
            from the +X axis.
        </PARA>
      </DESC>
    </PARAM>
    <PARAM name="arange" type="string" def="360" min="0">
      <SYNOPSIS>
        The stopping angle, measured in degrees CCW from astart.
      </SYNOPSIS>
      <DESC>
        <PARA>
            The arange is the number of degrees to include in the
            grid.  Pixels outside the range astart to astart+arange are
            not grouped.  Setting arange=360 includes all angles.
            Setting to less than 360 means only a wedge of angles will
            be grouped. 
        </PARA>
      </DESC>
    </PARAM>

    <PARAM name="ellipticity" type="real" def="1" min="0" max="1">
      <SYNOPSIS>
        Ellipticity of epanda and bpanda regions.
      </SYNOPSIS>
      <DESC>
        <PARA>
          In this case, ellipticity is simply the ratio of the minor-axis 
          divided by the major axis.  A value of 1 means that major==minor
          which produces circles and squares for epanda and bpanda.
          A value of 0 mean minor=0, which is bad -- basically the 
          shapes collapse down to a line.        
        </PARA>
      </DESC>
    </PARAM>

    <PARAM name="rotang" type="read" def="0" min="0" max="360">
      <SYNOPSIS>
        Rotation angle of the major axis for epanda and bpanda regions.
      </SYNOPSIS>
      <PARA>
        This value is in degrees, measured counter-clock-wise from
        the +X axis.      
      </PARA>
    </PARAM>


    <PARAM name="minradius" type="real" def="0.5" min="0">
      <SYNOPSIS>
        The minimum allowable radius, in pixels, when dividing subimages.
      </SYNOPSIS>
      <DESC>
        <PARA>
            This parameter controls how far we will let the algorithm go
            to try to split up pixels into groups.  It can continue to
            divide the image until the minradius is reach at which point 
            the group is used regardless of the SNR criteria.
        </PARA>
      </DESC>
    </PARAM>

    <PARAM name="minangle" type="real" def="1" min="0">
      <SYNOPSIS>
        The minimum allowable angle, in degrees, when dividing subimages.
      </SYNOPSIS>
      <DESC>
        <PARA>
            See minradius.
        </PARA>
      </DESC>
    </PARAM>



      <PARAM filetype="input" name="inerrfile" reqd="no" type="file">
         <SYNOPSIS>
	   Input error image
         </SYNOPSIS>
         <DESC>
            <PARA>
	      Image containing the error estimate for each pixel in
	      infile. The square of the pixel values is used when
	      computing the SNR.  The error image must be the same
	      dimensionality as infile (datatype is arbitrary). 
            </PARA>
         </DESC>
      </PARAM>
      <PARAM autoname="yes" filetype="output" name="outmaskfile" reqd="no" type="file">
         <SYNOPSIS>
	 Image with grouping information
         </SYNOPSIS>
         <DESC>
            <PARA>
	      Indicated which group number (arbitrary) the pixel belongs
	      to.  Can be used with <HREF link="http://cxc.harvard.edu/ciao/ahelp/dmmaskbin.html">dmmaskbin</HREF> to bin another image of the same
	      dimension using the same grouping scheme.
	</PARA>

        <PARA>
        The output mask file contains a REGION extension which contains the
        individual regions that describe each group.
        The REGION logic for epanda and bpanda is        
        </PARA>
<VERBATIM>
shape_outer *! shape_inner * sector
</VERBATIM>


        <PARA>
        where shape is either rotated ellipse or rotated box.
        The sector captures the angle range.   It takes 3 shapes to describe
        a grid.  In the FITS table, this will be 3 rows in the table 
        all with the same COMPONENT value (the component value will not
        necessarily equal the map pixel value).
        </PARA>
        <PARA title="Note: ds9">
        Note that ds9 does not render the sector shape.  If you load the
        region in ds9 it will skip over those shapes, omitting the angular
        boundaries between groups.
        </PARA>

         </DESC>
      </PARAM>
      <PARAM autoname="yes" filetype="output" name="outsnrfile" reqd="no" type="file">
         <SYNOPSIS>
	Image containg the SNR for each pixel/sub-image
         </SYNOPSIS>
         <DESC>
            <PARA>
	The SNR value computed for each sub-image is stored in this
	file.  Sharp edges in the SNR map can be used to detect
	extended emission.
            </PARA>
         </DESC>
      </PARAM>
      <PARAM autoname="yes" filetype="output" name="outareafile" reqd="no" type="file">
         <SYNOPSIS>
	The area (in number of pixels) of each sub-image.
         </SYNOPSIS>
         <DESC>
            <PARA>
	The area of each sub-image is stored.  This can be useful to
	exclude particularly large regions where statistics may
	dominate the analysis or to remove data from the edge of the
	image.
            </PARA>
         </DESC>
      </PARAM>
      <PARAM def="0" max="5" min="0" name="verbose" reqd="no" type="integer">
         <SYNOPSIS>
	Tool chatter level
         </SYNOPSIS>
      </PARAM>
      <PARAM def="no" name="clobber" reqd="no" type="boolean">
         <SYNOPSIS>
	Remove existing outputs?
         </SYNOPSIS>
         <DESC>
            <PARA>
	Remove existing output files if they already exist?
            </PARA>
         </DESC>
      </PARAM>
   </PARAMLIST>






   <BUGS>
       <PARA>
	See the
        <HREF link="https://cxc.cfa.harvard.edu/ciao/bugs/dmradar.html">bugs page
	for this tool</HREF>
        on the CIAO website for an up-to-date listing of known bugs.
      </PARA></BUGS>
   <LASTMODIFIED>January 2021</LASTMODIFIED>
</ENTRY>
</cxchelptopics>
